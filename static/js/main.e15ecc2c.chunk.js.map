{"version":3,"sources":["classes/CreateTodo.js","classes/ShowTodo.js","App.js","serviceWorker.js","index.js"],"names":["CreateTodo","react_default","a","createElement","style","textAlign","onSubmit","this","bind","type","placeholder","ref","autoFocus","width","display","outline","className","onClick","props","removeAll","e","createTask","refs","task","value","preventDefault","React","Component","ShowTodo","_this","tasks","showTask","console","log","listHeight","overflow","height","todos","map","item","key","id","taskValue","remove","removeTask","items","get","add","obj","push","i","length","splice","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","window","outerHeight","Storage","localTodo","localStorage","getItem","JSON","parse","state","classes_CreateTodo","classes_ShowTodo","setState","setItem","stringify","clear","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e15ecc2c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass CreateTodo extends React.Component {\r\n    render () {\r\n        return (\r\n            <form style={{textAlign:\"center\"}} onSubmit={this.onSubmit.bind(this)}>\r\n                <input type=\"text\" placeholder=\"Task\" ref=\"task\" autoFocus/>\r\n                <button style={{width:\"90%\", display:\"inline\", outline:\"none\"}} className=\"btn btn-primary btn-block\">Add</button>\r\n                <button style={{width:\"90%\", display:\"inline\", outline:\"none\"}} onClick={this.props.removeAll} className=\"btn btn-negative btn-block btn-outlined\">Clear All</button>\r\n            </form>\r\n        );\r\n    }\r\n    onSubmit (e) {\r\n        // createTask è il prop chiamato in <CreateTodo createTask={this.createTask.bind(this)} />\r\n        this.props.createTask(this.refs.task.value);\r\n        // resetto l'input\r\n        this.refs.task.value = \"\";\r\n        e.preventDefault();\r\n    }\r\n}\r\nexport default CreateTodo;","import React from \"react\";\r\n\r\nclass ShowTodo extends React.Component {\r\n    render() {\r\n        var tasks = this.props.showTask;\r\n        console.log(this.props.listHeight);\r\n        return (\r\n            <div style={{overflow:\"auto\", height:this.props.listHeight+\"px\"}}>\r\n                <ul className=\"table-view\">\r\n                    {tasks.todos.map(item => (\r\n                        <li className=\"table-view-cell\" key={item.id}>\r\n                        {item.taskValue}\r\n                        <button className=\"btn btn-negative\" value={item.id} onClick={ remove => (this.props.removeTask(item.id))}>Remove</button>\r\n                    </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        );\r\n      }\r\n}\r\nexport default ShowTodo;\r\n","import React, { Component } from 'react';\nimport CreateTodo from \"./classes/CreateTodo\";\nimport ShowTodo from \"./classes/ShowTodo\";\nimport './App.css';\n\nconst todos = {\n  items: [],\n  get(){\n    return this.items;\n  },\n  add(obj){\n    this.items.push(obj);\n  },\n  remove (id) {\n    // cerca l'id del task tra l'array di array this.items\n    for (var i=0; i < this.items.length;i++){\n      // se lo trova, lo cancella\n      if (this.items[i].id === id){\n        this.items.splice(i, 1);\n        return;\n      }\n    }\n  },\n  removeAll(){\n    this.items = []\n    return;\n  }\n};\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.listHeight = window.outerHeight - 300;\n    // se il browser è compatibile con localstorage\n    if (typeof(Storage) !== \"undefined\") {\n      var localTodo = localStorage.getItem('1');\n      if (localTodo !== null){\n        todos.items = JSON.parse(localTodo);\n      }\n    }\n    this.state = {\n      todos: todos.items\n    };\n  }\n  render() {\n    return (\n      <div>\n        <CreateTodo\n          // binding tra createTask e la funzione this.createTask\n          createTask={this.createTask.bind(this)}\n          // binding tra removeAll e la funzione this.removeAll\n          removeAll={this.removeAll.bind(this)}\n        />\n        <ShowTodo showTask={this.state} removeTask={this.removeTask.bind(this)} listHeight={this.listHeight}/>\n      </div>\n    );\n  }\n  createTask(taskValue){\n    if (taskValue !== \"\"){\n      var id = this.state.todos.length + 1;\n      todos.add({id, taskValue});\n      this.setState({ todos: todos.get() });\n      // se il browser è compatibile con il localstorage\n      if (typeof(Storage) !== \"undefined\") {\n        localStorage.setItem('1', JSON.stringify(this.state.todos));\n      }\n      //console.log(this.state);\n    }\n  }\n  removeTask(id){\n    todos.remove(id);\n    this.setState({ todos: todos.get() });\n    if (typeof(Storage) !== \"undefined\") {\n      localStorage.setItem('1', JSON.stringify(this.state.todos));\n    }\n    //console.log(this.state);\n  }\n  removeAll(){\n    todos.removeAll();\n    this.setState({ todos: todos.get() });\n    if (typeof(Storage) !== \"undefined\") {\n      localStorage.clear();\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}