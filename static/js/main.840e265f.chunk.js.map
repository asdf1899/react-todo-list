{"version":3,"sources":["classes/CreateTodo.js","classes/ShowTodo.js","App.js","serviceWorker.js","index.js"],"names":["CreateTodo","react_default","a","createElement","style","textAlign","onSubmit","this","bind","type","placeholder","ref","autoFocus","width","display","className","e","props","createTask","refs","task","value","preventDefault","React","Component","ShowTodo","_this","tasks","showTask","console","log","todos","map","item","key","id","taskValue","onClick","remove","removeTask","items","get","add","obj","push","splice","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","classes_CreateTodo","classes_ShowTodo","length","setState","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAmBeA,mLAfP,OACIC,EAAAC,EAAAC,cAAA,QAAMC,MAAO,CAACC,UAAU,UAAWC,SAAUC,KAAKD,SAASE,KAAKD,OAC5DN,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,YAAY,OAAOC,IAAI,OAAOC,WAAS,IAC1DX,EAAAC,EAAAC,cAAA,UAAQC,MAAO,CAACS,MAAM,MAAOC,QAAQ,UAAWC,UAAU,8BAA1D,yCAIFC,GAENT,KAAKU,MAAMC,WAAWX,KAAKY,KAAKC,KAAKC,OAErCd,KAAKY,KAAKC,KAAKC,MAAQ,GACvBL,EAAEM,wBAdeC,IAAMC,WCoBhBC,mLAnBF,IAAAC,EAAAnB,KACDoB,EAAQpB,KAAKU,MAAMW,SAIvB,OAHAC,QAAQC,IAAIH,EAAMI,OAId9B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIY,UAAU,cACTY,EAAMI,MAAMC,IAAI,SAAAC,GAAI,OACjBhC,EAAAC,EAAAC,cAAA,MAAIY,UAAU,kBAAkBmB,IAAKD,EAAKE,IACzCF,EAAKG,UACNnC,EAAAC,EAAAC,cAAA,UAAQY,UAAU,mBAAmBM,MAAOY,EAAKE,GAAIE,QAAU,SAAAC,GAAM,OAAKZ,EAAKT,MAAMsB,WAAWN,EAAKE,MAArG,uBAZDZ,IAAMC,WCGvBO,SAAQ,CACZS,MAAO,GACPC,IAFY,WAGV,OAAOlC,KAAKiC,OAEdE,IALY,SAKRC,GACFpC,KAAKiC,MAAMI,KAAKD,IAElBL,OARY,SAQJH,GACN5B,KAAKiC,MAAMK,OAAOV,EAAI,MAoCXW,cA/Bb,SAAAA,EAAa7B,GAAO,IAAAS,EAAA,OAAAqB,OAAAC,EAAA,EAAAD,CAAAxC,KAAAuC,IAChBpB,EAAAqB,OAAAE,EAAA,EAAAF,CAAAxC,KAAAwC,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA5C,KAAMU,KACDmC,MAAQ,CACTrB,MAAOA,EAAMS,OAHDd,wEAOlB,OACEzB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkD,EAAD,CACEnC,WAAYX,KAAKW,WAAWV,KAAKD,QAEnCN,EAAAC,EAAAC,cAACmD,EAAD,CAAU1B,SAAUrB,KAAK6C,MAAOb,WAAYhC,KAAKgC,WAAW/B,KAAKD,4CAI5D6B,GACT,GAAkB,KAAdA,EAAiB,CACnB,IAAID,EAAK5B,KAAK6C,MAAMrB,MAAMwB,OAC1BxB,EAAMW,IAAI,CAACP,KAAIC,cACf7B,KAAKiD,SAAS,CAAEzB,MAAOA,EAAMU,4CAItBN,GACTJ,EAAMO,OAAOH,GACb5B,KAAKiD,SAAS,CAAEzB,MAAOA,EAAMU,eA3BfjB,aCNEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.840e265f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass CreateTodo extends React.Component {\r\n    render () {\r\n        return (\r\n            <form style={{textAlign:\"center\"}} onSubmit={this.onSubmit.bind(this)}>\r\n                <input type=\"text\" placeholder=\"Task\" ref=\"task\" autoFocus/>\r\n                <button style={{width:\"90%\", display:\"inline\"}} className=\"btn btn-primary  btn-block\">Add</button>\r\n            </form>\r\n        );\r\n    }\r\n    onSubmit (e) {\r\n        // createTask Ã¨ il prop chiamato in <CreateTodo createTask={this.createTask.bind(this)} />\r\n        this.props.createTask(this.refs.task.value);\r\n        // resetto l'input\r\n        this.refs.task.value = \"\";\r\n        e.preventDefault();\r\n    }\r\n}\r\nexport default CreateTodo;\r\n","import React from \"react\";\r\n\r\nclass ShowTodo extends React.Component {\r\n    render() {\r\n        var tasks = this.props.showTask;\r\n        console.log(tasks.todos);\r\n        // @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n        // BUG QUANDO SI CERCA DI CANCELLARE LA LISTA IN ORDINE, NON FUNZIONA\r\n        return (\r\n            <div>\r\n                <ul className=\"table-view\">\r\n                    {tasks.todos.map(item => (\r\n                        <li className=\"table-view-cell\" key={item.id}>\r\n                        {item.taskValue}\r\n                        <button className=\"btn btn-negative\" value={item.id} onClick={ remove => (this.props.removeTask(item.id))}>Elimina</button>\r\n                    </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        );\r\n      }\r\n}\r\nexport default ShowTodo;\r\n","import React, { Component } from 'react';\nimport CreateTodo from \"./classes/CreateTodo\";\nimport ShowTodo from \"./classes/ShowTodo\";\nimport './App.css';\n\nconst todos = {\n  items: [],\n  get(){\n    return this.items;\n  },\n  add(obj){\n    this.items.push(obj);\n  },\n  remove (id) {\n    this.items.splice(id, 1);\n  }\n};\n\nclass App extends Component {\n  constructor (props) {\n      super(props);\n      this.state = {\n          todos: todos.items\n      };\n  }\n  render() {\n    return (\n      <div>\n        <CreateTodo\n          createTask={this.createTask.bind(this)}\n        />\n        <ShowTodo showTask={this.state} removeTask={this.removeTask.bind(this)}/>\n      </div>\n    );\n  }\n  createTask(taskValue){\n    if (taskValue !== \"\"){\n      var id = this.state.todos.length;\n      todos.add({id, taskValue});\n      this.setState({ todos: todos.get() });\n      //console.log(this.state);\n    }\n  }\n  removeTask(id){\n    todos.remove(id);\n    this.setState({ todos: todos.get() });\n    //console.log(this.state);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}